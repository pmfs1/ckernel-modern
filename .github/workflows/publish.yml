name: 'PUBLISH'
on:
  schedule:
    - cron: '0 9 * * *'
  push:
    branches: [ "trunk" ]
    tags: [ '*.*.*.*' ]
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "${{ github.repository }}"
jobs:
  PUBLISH:
    name: 'PUBLISH'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    concurrency:
      group: "${{ github.ref_name }}-${{ github.run_id }}"
      cancel-in-progress: true
    steps:
      - name: 'CHECKOUT'
        uses: actions/checkout@v4
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: 'INSTALL COSIGN'
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'
      - name: 'COMPILE'
        if: github.event_name != 'pull_request'
        run: sudo apt-get update -y && sudo apt-get install -y gcc-multilib libc6-dev-i386 kmod genisoimage squashfs-tools && make krlean cdrom
      - name: 'PREPARE'
        if: github.event_name != 'pull_request'
        run: |  
          mkdir rootfs
          sudo mount -o loop -t iso9660 bin/img/krlean.iso rootfs
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: 'SETUP'
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: 'AUTHENTICATE'
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: 'GET METADATA'
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: 'IMPORT'
        if: github.event_name != 'pull_request'
        run: |
          sudo tar -C rootfs -c . | docker import - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: 'PUSH'
        id: build-and-push
        if: github.event_name != 'pull_request'
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "DIGEST=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)" >> $GITHUB_ENV
      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: 'SIGN '
        if: ${{ github.event_name != 'pull_request' }}
        env:
          IMAGE_REF: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          digest=$(docker inspect $IMAGE_REF --format='{{index .RepoDigests 0}}')
          cosign sign --yes $digest
      - name: 'ATTEST'
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ env.DIGEST }}
          push-to-registry: true
      - name: 'UPLOAD ARTIFACT (ISO)'
        uses: actions/upload-artifact@v4
        with:
          name: "krlean-${{ github.sha }}.iso"
          path: 'bin/img/krlean.iso'
      - name: 'UPLOAD ARTIFACT (VMDK)'
        uses: actions/upload-artifact@v4
        with:
          name: "krlean-${{ github.sha }}.vmdk"
          path: 'bin/img/krlean.vmdk'